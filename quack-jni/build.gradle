apply plugin: 'cpp-library'

task quickjs(type: Exec) {
    workingDir '../../quickjs'
    commandLine 'make'
    args ( '-j32','libquickjs.a','.obj/quickjs-libc.o')

    //store the output instead of printing to the console:
    standardOutput = new ByteArrayOutputStream()

    //extension method stopTomcat.output() can be used to obtain the output:
    ext.output = {
        return standardOutput.toString()
    }
}


tasks.whenTaskAdded { task ->
    if (task.name == 'compileDebugCpp') {
        task.dependsOn quickjs
    }
}

library {
    source.from file('src/main/jni/duktape')
    source.from file('src/main/jni/duktape-jni')
    source.from('src/main/cpp/duktape.cpp')

    source.from file('src/main/jni/quickjs-jni')

    source.from('src/main/jni/JSContext.h')
    source.from('src/main/jni/context-jni.cpp')

    publicHeaders.from file('/Applications/Xcode.app//Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX.sdk/System/Library/Frameworks/JavaVM.framework/Versions/A/Headers/')

}

tasks.withType(CppCompile).configureEach {
    compilerArgs.add '-std=c++11'
    compilerArgs.add '-Werror'
}

tasks.withType(LinkSharedLibrary).configureEach {
    linkerArgs.add '-L../../quickjs/'
    linkerArgs.add '-lquickjs'

    linkerArgs.add '../../quickjs/.obj/quickjs-libc.o'
}
